import csv
import os
import smtplib
import ssl
from configparser import ConfigParser
from email import encoders
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart


CURRENT_DIRECTORY = os.path.dirname(os.path.realpath(__file__)).replace("\\", "/")
MAIL_ATTACHMENTS_DIRECTORY = f"{CURRENT_DIRECTORY}/mail_attachments"
MAIL_LIST_FILE_NAME = "mail_list.csv"
MAIL_LIST_FILE_PATH = f"{CURRENT_DIRECTORY}/{MAIL_LIST_FILE_NAME}"
CONFIG_FILE_NAME = "mail_sender.ini"
CONFIG_FILE_PATH = f"{CURRENT_DIRECTORY}/{CONFIG_FILE_NAME}"

# 0 - ID
# 1 - –£—á–µ–Ω–∏–∫
# 2 - email
# 3 - File name
# 4 - –ø—Ä–∏—Å—ä—Å—Ç–≤–∏—è –æ—Ç 2 —Å—ä–±–∏—Ç–∏—è –∏ 2 –æ–±—É—á–µ–Ω–∏—è
# 5 - –ö—Ä–∞–π–Ω–∏ —Å—Ä–æ–∫–æ–≤–µ –æ–±—â–æ
# 6 - –±—Ä–æ–π —Å—Ä–µ—â–∏
INDEX_STUDENT_NAME = 1
INDEX_STUDENT_EMAIL = 2
INDEX_STUDENT_FILE_NAME = 3


def get_config():
    config = ConfigParser(allow_no_value=True)
    config.read(CONFIG_FILE_PATH)
    return config


def create_message(sender_email: str, receiver_email: str, receiver_name: str, attachment_file_path: str):
    message = MIMEMultipart("alternative")
    message["Subject"] = "ABLE Mentor | –ö–æ–ª–∫–æ —Ç–æ—á–∫–∏ –∏–º–∞—à? üöÄ"
    message["From"] = sender_email
    message["To"] = receiver_email
    body_text = """\
–ó–¥—Ä–∞–≤–µ–π, ‚úåÔ∏è

–ö–∞–∫—Ç–æ —Å–ø–æ–¥–µ–ª–∏—Ö–º–µ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–∞, –≤—Å–µ–∫–∏ –µ–∫–∏–ø —Ç—Ä—É–ø–∞ —Ç–æ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–∏–µ. üé≤ –ò–∑–º–µ—Ä–≤–∞–º–µ –≥–æ —á—Ä–µ–∑ —Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø—Ä–∏—Å—ä—Å—Ç–≤–∏–µ –Ω–∞ —Å—ä–±–∏—Ç–∏—è (–æ–±—â–æ 4), —Å–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫—Ä–∞–π–Ω–∏ —Å—Ä–æ–∫–æ–≤–µ (–æ–±—â–æ 3) –∏ –±—Ä–æ–π —Å—Ä–µ—â–∏ —Å –º–µ–Ω—Ç–æ—Ä–∞ (–±–µ–∑ –º–∞–∫—Å–∏–º—É–º). üêù

–ö–∞—Ç–æ –ø—Ä–∏–∫–∞—á–µ–Ω —Ñ–∞–π–ª —â–µ –æ—Ç–∫—Ä–∏–µ—à —Ç–≤–æ–∏—Ç–µ —Ç–æ—á–∫–∏ –∑–∞ –≤—Å—è–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫—ä–º —Ç–æ–∑–∏ –º–æ–º–µ–Ω—Ç. üéâ –ò –ø–æ–º–Ω–∏, –Ω–∏–∫–æ–≥–∞ –Ω–µ –µ –∫—ä—Å–Ω–æ –¥–∞ –Ω–∞–≤–∞–∫—Å–∞—à! üòè

–ü–æ–∑–¥—Ä–∞–≤–∏,
–ï–∫–∏–ø—ä—Ç –Ω–∞ ABLE Mentor
"""

    # Attach body
    message.attach(MIMEText(body_text, "plain"))

    # Add attachment
    file_name = f"{receiver_name}.pdf"
    payload = MIMEBase("application", "octet-stream", Name=file_name)  # attachment as application/octet-stream
    with open(attachment_file_path, "rb") as binary_file:
        payload.set_payload(binary_file.read())

    # Encode file in ASCII characters to send by email
    encoders.encode_base64(payload)

    # Add header as key/value pair to attachment part
    payload.add_header('Content-Decomposition', 'attachment', filename=file_name)
    message.attach(payload)
    return message


def send_mails():
    smtp_server = "smtp.gmail.com"
    port = 465  # For SSL
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
        config = get_config()
        sender_email = config["General"]["sender_email"]
        password = config["General"]["password"]
        server.login(sender_email, password)

        with open(MAIL_LIST_FILE_PATH, encoding="utf-8", mode="r") as fstream:
            reader = csv.reader(fstream, delimiter=',', quotechar='"')
            for idx, row in enumerate(reader):
                if idx == 0:
                    continue  # skip first row

                receiver_email = row[INDEX_STUDENT_EMAIL]
                receiver_name = row[INDEX_STUDENT_NAME]
                attachment_file_name = row[INDEX_STUDENT_FILE_NAME]
                attachment_file_path = f"{MAIL_ATTACHMENTS_DIRECTORY}/{attachment_file_name}.pdf"
                message = create_message(sender_email, receiver_email, receiver_name, attachment_file_path)

                print(f"Sending email to '{receiver_email}'. Attached file: '{receiver_name}.pdf'")
                server.sendmail(sender_email, receiver_email, message.as_string())


if __name__ == "__main__":
    send_mails()
